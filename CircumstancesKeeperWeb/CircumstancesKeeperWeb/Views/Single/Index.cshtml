@* (c) 2020 Manabu Tonosaki *@
@* Licensed under the MIT license. *@

@model CircumstancesKeeperWeb.Models.SingleViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/css/videoview.css" rel="stylesheet" asp-append-version="true" />

<h1>@ViewBag.Location</h1>
<div class="MonitorView">
    <img id="Video" src="~/img/novideo.png" class="img-responsive center-block" style="margin-right:8px;" />
</div>
<div>
    <span id="DateLinks" class="DatePicker">...</span>
    <span id="TimeStamp" class="TimeStampDesign">2020/12/31 23:59:59</span>
</div>

<div id="timeslider1" class="TimeSliderDegign">
    <div></div>
    <input type="button" value="">
</div>

<img id="VideoBuffer" src="~/img/novideo.png" class="img-responsive center-block" style="height: 0px; visibility: hidden;" />
<div>
    <button type="button" class="btn btn-primary"><i class="glyphicon glyphicon-play"></i> PLAY</button>
</div>

@section Scripts {
    <script type="text/javascript">
        var Hot = {};
        var Cold = {};
        Cold.IntervalMilliseconds = 1000;
    </script>
    <script type="text/javascript">
        @*TIME SLIDER PROC*@
        const SliderProc = slider => {
            slider.knob = slider.getElementsByTagName('input')[0];
            slider.isDragging = false;
            slider.ValuePx = 0;
            slider.ValueRatio = 0.0;
            slider.tmpvalue = slider.ValuePx;
            slider.knobwidth = slider.knob.clientWidth / 2;

            var set_value = () => {
                slider.knob.style.left = (slider.tmpvalue - slider.knob.clientWidth / 2) + 'px';
                slider.ValuePx = slider.tmpvalue;
                slider.ValueRatio = slider.tmpvalue / slider.clientWidth;
                if (slider.onRatioChanged != undefined) {
                    slider.onRatioChanged(slider.ValueRatio);
                }
            };
            set_value();

            slider.onclick = evt => {
                slider.isDragging = true;
                document.onmousemove(evt);
                document.onmouseup();
            };
            slider.knob.onmousedown = evt => {
                slider.isDragging = true;
                if (slider.onBeginning != undefined) {
                    slider.onBeginning(slider.ValueRatio);
                }
                return false;
            };
            document.onmouseup = evt => {
                if (slider.isDragging) {
                    slider.isDragging = false;
                    slider.ValuePx = slider.tmpvalue;
                    slider.ValueRatio = slider.tmpvalue / slider.clientWidth;
                    if (slider.onFnished != undefined) {
                        slider.onFnished(slider.ValueRatio);
                    }
                }
            };
            document.onmousemove = evt => {
                if (slider.isDragging) {
                    if (!evt) {
                        evt = window.event;
                    }
                    var left = evt.clientX;
                    var rect = slider.getBoundingClientRect();
                    slider.tmpvalue = Math.round(left - rect.left - slider.knobwidth);
                    if (slider.tmpvalue < 0) {
                        slider.tmpvalue = 0;
                    } else if (slider.tmpvalue > slider.clientWidth) {
                        slider.tmpvalue = slider.clientWidth;
                    }
                    set_value();
                    return false;
                }
            };
            window.onresize = evt => {
                slider.tmpvalue = slider.ValueRatio * slider.clientWidth;
                set_value();
            };
        };

        const SetSliderRatio = (slider, ratio) => {
            slider.tmpvalue = ratio * slider.clientWidth;
            slider.knob.style.left = (slider.tmpvalue - slider.knob.clientWidth / 2) + 'px';
            slider.ValuePx = slider.tmpvalue;
            slider.ValueRatio = slider.tmpvalue / slider.clientWidth;
        };

    </script>
    <script type="text/javascript">
        const Reset = () => {
            Cold.Image = document.getElementById("Video");
            Cold.ImageVideoBuffer = document.getElementById("VideoBuffer");
            Cold.TimeSlider = document.getElementById('timeslider1');
            Cold.TimeStamp = document.getElementById('TimeStamp');

            Hot.TargetDate = new Date();
            Hot.PlayMode = "LATEST";
            Hot.OffsetMilliseconds = -0.0;
            Hot.LastSuccessSrc = Cold.Image.src;

            Cold.ImageVideoBuffer.onload = () => {
                Hot.LastSuccessSrc = Cold.ImageVideoBuffer.src;
                Cold.Image.src = Hot.LastSuccessSrc;
                Hot.OffsetMilliseconds = Hot.OffsetMilliseconds + 100;
            }
            Cold.ImageVideoBuffer.onerror = () => {
                Hot.OffsetMilliseconds -= 500;
                Cold.Image.src = Hot.LastSuccessSrc;
            }

            $.get("/api/Time",
                function (data) {
                    Cold.StartTime = new Date(data);
                    var now = new Date();
                    Hot.OffsetMilliseconds = Cold.StartTime - now;
                    setInterval(AutoUpdateShot, Cold.IntervalMilliseconds);
                }
            );

            var dp = document.getElementById("DateLinks");
            var dph = "";
            for (var i = 2; i >= 0; i--) {
                var today = new Date();
                today.setDate(today.getDate() - i);
                var dstr = (today.getMonth() + 1) + "/" + today.getDate();
                var bcol = i == 0 ? "btn-primary text-light" : "btn-info text-light";
                var ref = "javascript:ChangeDate(\"" + today.toISOString() + "\")";
                dph = dph + "<span><a class='btn " + bcol + " DateButton' href='" + ref + "'>" + dstr + "</a></span>";
            }
            dp.innerHTML = dph;

            SliderProc(Cold.TimeSlider);
            Cold.TimeSlider.onRatioChanged = ratio => {
                var t = new Date(Hot.TargetDate);
                var sec = ratio * 86400;
                t.setMilliseconds(0);
                t.setHours(0);
                t.setMinutes(0);
                t.setSeconds(sec);

                if (t < new Date()) {
                    Hot.LastSuccessSrc = "/img/novideo.png";
                } else {
                    Hot.LastSuccessSrc = "/img/novideof.png";
                }
                UpdateShot(t);
            };

            Cold.TimeSlider.onBeginning = ratio => {
                Hot.PlayMode = "STOP";
                Hot.LastSuccessSrc = "/img/novideo.png";
            };

            Cold.TimeSlider.onFnished = ratio => {
                Hot.PlayMode = "PLAYSHIFTED";
            };
        };

        const ChangeDate = (isodate) => {
            Hot.TargetDate = new Date(isodate);
            AutoUpdateShot();
        }

        const UpdateShot = t => {
            Cold.ImageVideoBuffer.src = '/api/Frame/' + '@ViewBag.Location' + '?dt=' + t.toISOString();
            var ratio = t.getHours() * 3600 + t.getMinutes() * 60 + t.getSeconds() + t.getMilliseconds() / 1000;
            ratio /= 86400.0;
            SetSliderRatio(Cold.TimeSlider, ratio);
            var a = new Date();
            Cold.TimeStamp.innerHTML = t.toLocaleString();
        };

        const AutoUpdateShot = () => {
            if (Hot.PlayMode == "PLAYSHIFTED") {
                var t = new Date();
                t.setFullYear(Hot.TargetDate.getFullYear());
                t.setMonth(Hot.TargetDate.getMonth());
                t.setDate(Hot.TargetDate.getDate());
                t.setHours(0);
                t.setMinutes(0);
                t.setMilliseconds(0);
                var sec = Cold.TimeSlider.ValueRatio * 86400;
                t.setSeconds(sec);
                t.setMilliseconds(Cold.IntervalMilliseconds + 1);
                var now = new Date();
                if (t > now) {
                    Hot.PlayMode == "LATEST";
                } else {
                    UpdateShot(t);
                }
            }
            if (Hot.PlayMode == "LATEST") {
                var t = new Date();
                t.setFullYear(Hot.TargetDate.getFullYear());
                t.setMonth(Hot.TargetDate.getMonth());
                t.setDate(Hot.TargetDate.getDate());
                t.setMilliseconds(t.getMilliseconds() + Hot.OffsetMilliseconds);
                t.setMilliseconds(0);
                UpdateShot(t);
            }
        };
    </script>
    <script type="text/javascript">
        $(document).ready(Reset);
    </script>
}